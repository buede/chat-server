# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: chat-server

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  tracing:
    lambda: true
  websocketsApiName: chat-server-api
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_REGION: ${self:provider.region}
    TABLE_NAME_CONNECTION: ${self:provider.environment.SERVERLESS_STAGE}-${self:provider.environment.SERVERLESS_REGION}-Connection
    TABLE_NAME_MESSAGE: ${self:provider.environment.SERVERLESS_STAGE}-${self:provider.environment.SERVERLESS_REGION}-Message
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:table/${self:provider.environment.TABLE_NAME_CONNECTION}
        - arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:table/${self:provider.environment.TABLE_NAME_MESSAGE}

custom:
  dynamodb:
    start:
      migrate: true
    stages:
      - local
  dynamodbStream:
    region: ${self:provider.environment.SERVERLESS_REGION}
    host: localhost
    port: 8000
    pollForever: true
    streams:
      - table: ${self:provider.environment.TABLE_NAME_MESSAGE}
        functions:
          - messageStream

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-offline-dynamodb-stream
  - serverless-offline

functions:
  chat:
    handler: src/handler/handler-chat.request
    memorySize: 128
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: sendMessage
  messageStream:
    handler: src/handler/handler-message-stream.request
    memorySize: 128
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [MessageTable, StreamArn]
          batchSize: 10
          startingPosition: TRIM_HORIZON
  status:
    handler: src/handler/handler-status.request
    memorySize: 128
    tracing: PassThrough
    disableLogs: true
    events:
      - http:
          path: status
          method: any

resources:
  Resources:
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME_CONNECTION}
        AttributeDefinitions:
          - AttributeName: connectionID
            AttributeType: S
        KeySchema:
          - AttributeName: connectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    MessageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME_MESSAGE}
        AttributeDefinitions:
          - AttributeName: messageID
            AttributeType: S
        KeySchema:
          - AttributeName: messageID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
